{"version":3,"names":["generateUniqueHash","exports","length","arguments","undefined","Math","max","min","characters","timestamp","Date","now","toString","hash","slice","i","randomIndex","floor","random","charAt","uniqueid","_length","idstr","String","fromCharCode","ascicode","normalizePath","path","replace","partes","split","pilha","_iterator","_createForOfIteratorHelper","_step","s","n","done","parte","value","pop","push","err","e","f","join","matchPath","url","_urlParsed$pathname2","_urlParsed$search","Array","isArray","map","p","getLocation","href","match","protocol","host","hostname","port","pathname","search","pathToRegExp","RegExp","_","paramName","concat","getQuery","_url$split$pop","JSON","parse","decodeURI","urlParsed","findPath","list","_iterator2","_step2","_urlParsed$pathname","expression","exec","matches","input","pathValid","params","groups","exact","query","Object","assign","bezierEasing","x1","y1","x2","y2","Error","kSplineTableSize","kSampleStepSize","A","a","b","B","C","calcBezier","c","getSlope","binarySubdivide","d","g","abs","newtonRaphsonIterate","currentSlope","currentX","x","sampleValues","Float32Array","getTForX"],"sources":["unknown"],"sourcesContent":["export const generateUniqueHash = (length = 16) => {\n    length = Math.max(4, Math.min(32, length));\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const timestamp = Date.now().toString(36); // Converta o timestamp para base36\n    let hash = \"\";\n    // Adicione parte do timestamp à hash\n    hash += timestamp.slice(-4); // Use os últimos 4 caracteres do timestamp\n    // Complete a hash com caracteres aleatórios\n    for (let i = 0; i < length - 4; i++) {\n        const randomIndex = Math.floor(Math.random() * characters.length);\n        hash += characters.charAt(randomIndex);\n    }\n    return hash;\n};\nexport const uniqueid = (length) => {\n    length = typeof length !== \"number\" ? 32 : Math.min(Math.max(5, length ?? 32), 32);\n    let idstr = String.fromCharCode(Math.floor(Math.random() * 25 + 65));\n    do {\n        let ascicode = Math.floor(Math.random() * 42 + 48);\n        if (ascicode < 58 || ascicode > 64) {\n            idstr += String.fromCharCode(ascicode);\n        }\n    } while (idstr.length < length);\n    return String(idstr).slice(0, length);\n};\nexport const normalizePath = (path) => {\n    path = typeof path === \"string\" ? path.replace(/\\/+/g, \"/\").replace(/\\/+$/g, \"\") : path;\n    const partes = path.split(\"/\");\n    const pilha = [];\n    for (const parte of partes) {\n        if (parte === \"..\") {\n            pilha.pop();\n        }\n        else if (parte !== \".\") {\n            pilha.push(parte);\n        }\n    }\n    return pilha.join(\"/\");\n};\nexport const matchPath = (path, url) => {\n    path = typeof path === \"string\" ? normalizePath(path) : Array.isArray(path) ? path.map((p) => (typeof path === \"string\" ? normalizePath(path) : p)) : path;\n    url = normalizePath(url);\n    const getLocation = (href) => {\n        const match = href.match(/^((https?\\:)\\/\\/(([^:\\/?#]*)(?:\\:([0-9]+))?))?([\\/]{0,1}[^?#]*)(\\?[^#]*|)(#.*|)$/);\n        return (match && {\n            href: href,\n            protocol: match[2],\n            host: match[3],\n            hostname: match[4],\n            port: match[5],\n            pathname: match[6],\n            search: match[7],\n            hash: match[8],\n        });\n    };\n    const pathToRegExp = (path) => new RegExp(path\n        .replace(/\\./g, \"\\\\.\")\n        .replace(/\\//g, \"/\")\n        .replace(/\\?/g, \"\\\\?\")\n        .replace(/\\/+$/, \"\")\n        .replace(/\\*+/g, \".*\")\n        .replace(/:([^\\d|^\\/][a-zA-Z0-9_]*(?=(?:\\/|\\\\.)|$))/g, (_, paramName) => `(?<${paramName}>[^\\/]+?)`)\n        .concat(\"(\\\\/|$)\"), \"gi\");\n    const getQuery = (url) => typeof url === \"string\" && url.search(/\\?/) >= 0 ? JSON.parse('{\"' + decodeURI((url.split(\"?\").pop() ?? \"\").replace(/&/g, '\",\"').replace(/=/g, '\":\"')) + '\"}') : {};\n    const urlParsed = getLocation(url);\n    const findPath = (path, url) => {\n        const list = Array.isArray(path) ? path : [path];\n        for (const p of list) {\n            const expression = p instanceof RegExp ? p : pathToRegExp(p);\n            const match = expression.exec(urlParsed?.pathname ?? \"\") || false;\n            const matches = p instanceof RegExp ? !!match : !!match && match[0] === match.input;\n            if (matches) {\n                return p;\n            }\n        }\n        return undefined;\n    };\n    const pathValid = findPath(path, url);\n    const expression = pathValid instanceof RegExp ? pathValid : pathToRegExp(pathValid ?? \"\");\n    const match = expression.exec(urlParsed?.pathname ?? \"\") || false;\n    const matches = pathValid instanceof RegExp ? !!match : !!match && match[0] === match.input;\n    const params = match ? match.groups || {} : {};\n    const search = getQuery(urlParsed?.search ?? \"\");\n    return { exact: matches, search, params, query: Object.assign({}, params, search) };\n};\n/**\n * @function {@link https://github.com/gre/bezier-easing bezierEasing-Github}\n * @param {number} x1\n * @param {number} y1\n * @param {number} x2\n * @param {number} y2\n * @returns {Function}\n */\nexport const bezierEasing = function (x1, y1, x2, y2) {\n    if (!(0 <= x1 && x1 <= 1 && 0 <= x2 && x2 <= 1)) {\n        throw new Error(\"bezier x values must be in [0, 1] range\");\n    }\n    let kSplineTableSize = 11, kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n    const A = (a, b) => {\n        return 1.0 - 3.0 * b + 3.0 * a;\n    };\n    const B = (a, b) => {\n        return 3.0 * b - 6.0 * a;\n    };\n    const C = (a) => {\n        return 3.0 * a;\n    };\n    const calcBezier = (a, b, c) => {\n        return ((A(b, c) * a + B(b, c)) * a + C(b)) * a;\n    };\n    const getSlope = (a, b, c) => {\n        return 3.0 * A(b, c) * a * a + 2.0 * B(b, c) * a + C(b);\n    };\n    const binarySubdivide = (a, b, c, d, e) => {\n        let f, g, i = 0;\n        do {\n            g = b + (c - b) / 2.0;\n            f = calcBezier(g, d, e) - a;\n            if (f > 0.0) {\n                c = g;\n            }\n            else {\n                b = g;\n            }\n        } while (Math.abs(f) > 0.0000001 && ++i < 10);\n        return g;\n    };\n    const newtonRaphsonIterate = (a, b, c, d) => {\n        for (let i = 0; i < 4; ++i) {\n            let currentSlope = getSlope(b, c, d);\n            if (currentSlope === 0.0) {\n                return b;\n            }\n            let currentX = calcBezier(b, c, d) - a;\n            b -= currentX / currentSlope;\n        }\n        return b;\n    };\n    if (x1 === y1 && x2 === y2) {\n        return (x) => {\n            return x;\n        };\n    }\n    let sampleValues = typeof Float32Array === \"function\" ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n    for (let i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, x1, x2);\n    }\n    const getTForX = (a) => {\n        let b = 0.0, c = 1, d = kSplineTableSize - 1;\n        for (; c !== d && sampleValues[c] <= a; ++c) {\n            b += kSampleStepSize;\n        }\n        --c;\n        let e = (a - sampleValues[c]) / (sampleValues[c + 1] - sampleValues[c]), f = b + e * kSampleStepSize, g = getSlope(f, x1, x2);\n        if (g >= 0.001) {\n            return newtonRaphsonIterate(a, f, x1, x2);\n        }\n        else if (g === 0.0) {\n            return f;\n        }\n        else {\n            return binarySubdivide(a, b, b + kSampleStepSize, x1, x2);\n        }\n    };\n    return (x) => {\n        return x === 0 ? 0 : x === 1 ? 1 : calcBezier(getTForX(x), y1, y2);\n    };\n};\n//# sourceMappingURL=utils.js.map"],"mappings":";;;;;;;;;AAAO,IAAMA,kBAAkB,GAAAC,OAAA,CAAAD,kBAAA,GAAG,SAArBA,kBAAkBA,CAAA,EAAoB;EAAA,IAAhBE,MAAM,GAAAC,SAAA,CAAAD,MAAA,QAAAC,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EAC1CD,MAAM,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,EAAE,EAAEL,MAAM,CAAC,CAAC;EAC1C,IAAMM,UAAU,GAAG,gEAAgE;EACnF,IAAMC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC3C,IAAIC,IAAI,GAAG,EAAE;EACb;EACAA,IAAI,IAAIJ,SAAS,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7B;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,MAAM,GAAG,CAAC,EAAEa,CAAC,EAAE,EAAE;IACjC,IAAMC,WAAW,GAAGX,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACa,MAAM,CAAC,CAAC,GAAGV,UAAU,CAACN,MAAM,CAAC;IACjEW,IAAI,IAAIL,UAAU,CAACW,MAAM,CAACH,WAAW,CAAC;EAC1C;EACA,OAAOH,IAAI;AACf,CAAC;AACM,IAAMO,QAAQ,GAAAnB,OAAA,CAAAmB,QAAA,GAAG,SAAXA,QAAQA,CAAIlB,MAAM,EAAK;EAAA,IAAAmB,OAAA;EAChCnB,MAAM,GAAG,OAAOA,MAAM,KAAK,QAAQ,GAAG,EAAE,GAAGG,IAAI,CAACE,GAAG,CAACF,IAAI,CAACC,GAAG,CAAC,CAAC,GAAAe,OAAA,GAAEnB,MAAM,cAAAmB,OAAA,cAAAA,OAAA,GAAI,EAAE,CAAC,EAAE,EAAE,CAAC;EAClF,IAAIC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACnB,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACa,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EACpE,GAAG;IACC,IAAIO,QAAQ,GAAGpB,IAAI,CAACY,KAAK,CAACZ,IAAI,CAACa,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;IAClD,IAAIO,QAAQ,GAAG,EAAE,IAAIA,QAAQ,GAAG,EAAE,EAAE;MAChCH,KAAK,IAAIC,MAAM,CAACC,YAAY,CAACC,QAAQ,CAAC;IAC1C;EACJ,CAAC,QAAQH,KAAK,CAACpB,MAAM,GAAGA,MAAM;EAC9B,OAAOqB,MAAM,CAACD,KAAK,CAAC,CAACR,KAAK,CAAC,CAAC,EAAEZ,MAAM,CAAC;AACzC,CAAC;AACM,IAAMwB,aAAa,GAAAzB,OAAA,CAAAyB,aAAA,GAAG,SAAhBA,aAAaA,CAAIC,IAAI,EAAK;EACnCA,IAAI,GAAG,OAAOA,IAAI,KAAK,QAAQ,GAAGA,IAAI,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,GAAGD,IAAI;EACvF,IAAME,MAAM,GAAGF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC;EAC9B,IAAMC,KAAK,GAAG,EAAE;EAAC,IAAAC,SAAA,GAAAC,0BAAA,CACGJ,MAAM;IAAAK,KAAA;EAAA;IAA1B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA4B;MAAA,IAAjBC,KAAK,GAAAJ,KAAA,CAAAK,KAAA;MACZ,IAAID,KAAK,KAAK,IAAI,EAAE;QAChBP,KAAK,CAACS,GAAG,CAAC,CAAC;MACf,CAAC,MACI,IAAIF,KAAK,KAAK,GAAG,EAAE;QACpBP,KAAK,CAACU,IAAI,CAACH,KAAK,CAAC;MACrB;IACJ;EAAC,SAAAI,GAAA;IAAAV,SAAA,CAAAW,CAAA,CAAAD,GAAA;EAAA;IAAAV,SAAA,CAAAY,CAAA;EAAA;EACD,OAAOb,KAAK,CAACc,IAAI,CAAC,GAAG,CAAC;AAC1B,CAAC;AACM,IAAMC,SAAS,GAAA7C,OAAA,CAAA6C,SAAA,GAAG,SAAZA,SAASA,CAAInB,IAAI,EAAEoB,GAAG,EAAK;EAAA,IAAAC,oBAAA,EAAAC,iBAAA;EACpCtB,IAAI,GAAG,OAAOA,IAAI,KAAK,QAAQ,GAAGD,aAAa,CAACC,IAAI,CAAC,GAAGuB,KAAK,CAACC,OAAO,CAACxB,IAAI,CAAC,GAAGA,IAAI,CAACyB,GAAG,CAAC,UAACC,CAAC;IAAA,OAAM,OAAO1B,IAAI,KAAK,QAAQ,GAAGD,aAAa,CAACC,IAAI,CAAC,GAAG0B,CAAC;EAAA,CAAC,CAAC,GAAG1B,IAAI;EAC1JoB,GAAG,GAAGrB,aAAa,CAACqB,GAAG,CAAC;EACxB,IAAMO,WAAW,GAAG,SAAdA,WAAWA,CAAIC,IAAI,EAAK;IAC1B,IAAMC,KAAK,GAAGD,IAAI,CAACC,KAAK,CAAC,kFAAkF,CAAC;IAC5G,OAAQA,KAAK,IAAI;MACbD,IAAI,EAAEA,IAAI;MACVE,QAAQ,EAAED,KAAK,CAAC,CAAC,CAAC;MAClBE,IAAI,EAAEF,KAAK,CAAC,CAAC,CAAC;MACdG,QAAQ,EAAEH,KAAK,CAAC,CAAC,CAAC;MAClBI,IAAI,EAAEJ,KAAK,CAAC,CAAC,CAAC;MACdK,QAAQ,EAAEL,KAAK,CAAC,CAAC,CAAC;MAClBM,MAAM,EAAEN,KAAK,CAAC,CAAC,CAAC;MAChB3C,IAAI,EAAE2C,KAAK,CAAC,CAAC;IACjB,CAAC;EACL,CAAC;EACD,IAAMO,YAAY,GAAG,SAAfA,YAAYA,CAAIpC,IAAI;IAAA,OAAK,IAAIqC,MAAM,CAACrC,IAAI,CACzCC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACrBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACrBA,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CACnBA,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CACrBA,OAAO,CAAC,4CAA4C,EAAE,UAACqC,CAAC,EAAEC,SAAS;MAAA,aAAAC,MAAA,CAAWD,SAAS;IAAA,CAAW,CAAC,CACnGC,MAAM,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC;EAAA;EAC7B,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIrB,GAAG;IAAA,IAAAsB,cAAA;IAAA,OAAK,OAAOtB,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACe,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAGQ,IAAI,CAACC,KAAK,CAAC,IAAI,GAAGC,SAAS,CAAC,EAAAH,cAAA,GAACtB,GAAG,CAACjB,KAAK,CAAC,GAAG,CAAC,CAACU,GAAG,CAAC,CAAC,cAAA6B,cAAA,cAAAA,cAAA,GAAI,EAAE,EAAEzC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;EAAA;EAC7L,IAAM6C,SAAS,GAAGnB,WAAW,CAACP,GAAG,CAAC;EAClC,IAAM2B,QAAQ,GAAG,SAAXA,QAAQA,CAAI/C,IAAI,EAAEoB,GAAG,EAAK;IAC5B,IAAM4B,IAAI,GAAGzB,KAAK,CAACC,OAAO,CAACxB,IAAI,CAAC,GAAGA,IAAI,GAAG,CAACA,IAAI,CAAC;IAAC,IAAAiD,UAAA,GAAA3C,0BAAA,CACjC0C,IAAI;MAAAE,MAAA;IAAA;MAApB,KAAAD,UAAA,CAAAzC,CAAA,MAAA0C,MAAA,GAAAD,UAAA,CAAAxC,CAAA,IAAAC,IAAA,GAAsB;QAAA,IAAAyC,mBAAA;QAAA,IAAXzB,CAAC,GAAAwB,MAAA,CAAAtC,KAAA;QACR,IAAMwC,WAAU,GAAG1B,CAAC,YAAYW,MAAM,GAAGX,CAAC,GAAGU,YAAY,CAACV,CAAC,CAAC;QAC5D,IAAMG,MAAK,GAAGuB,WAAU,CAACC,IAAI,EAAAF,mBAAA,GAACL,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEZ,QAAQ,cAAAiB,mBAAA,cAAAA,mBAAA,GAAI,EAAE,CAAC,IAAI,KAAK;QACjE,IAAMG,QAAO,GAAG5B,CAAC,YAAYW,MAAM,GAAG,CAAC,CAACR,MAAK,GAAG,CAAC,CAACA,MAAK,IAAIA,MAAK,CAAC,CAAC,CAAC,KAAKA,MAAK,CAAC0B,KAAK;QACnF,IAAID,QAAO,EAAE;UACT,OAAO5B,CAAC;QACZ;MACJ;IAAC,SAAAX,GAAA;MAAAkC,UAAA,CAAAjC,CAAA,CAAAD,GAAA;IAAA;MAAAkC,UAAA,CAAAhC,CAAA;IAAA;IACD,OAAOxC,SAAS;EACpB,CAAC;EACD,IAAM+E,SAAS,GAAGT,QAAQ,CAAC/C,IAAI,EAAEoB,GAAG,CAAC;EACrC,IAAMgC,UAAU,GAAGI,SAAS,YAAYnB,MAAM,GAAGmB,SAAS,GAAGpB,YAAY,CAACoB,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,EAAE,CAAC;EAC1F,IAAM3B,KAAK,GAAGuB,UAAU,CAACC,IAAI,EAAAhC,oBAAA,GAACyB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEZ,QAAQ,cAAAb,oBAAA,cAAAA,oBAAA,GAAI,EAAE,CAAC,IAAI,KAAK;EACjE,IAAMiC,OAAO,GAAGE,SAAS,YAAYnB,MAAM,GAAG,CAAC,CAACR,KAAK,GAAG,CAAC,CAACA,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,KAAKA,KAAK,CAAC0B,KAAK;EAC3F,IAAME,MAAM,GAAG5B,KAAK,GAAGA,KAAK,CAAC6B,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EAC9C,IAAMvB,MAAM,GAAGM,QAAQ,EAAAnB,iBAAA,GAACwB,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEX,MAAM,cAAAb,iBAAA,cAAAA,iBAAA,GAAI,EAAE,CAAC;EAChD,OAAO;IAAEqC,KAAK,EAAEL,OAAO;IAAEnB,MAAM,EAANA,MAAM;IAAEsB,MAAM,EAANA,MAAM;IAAEG,KAAK,EAAEC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,MAAM,EAAEtB,MAAM;EAAE,CAAC;AACvF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAM4B,YAAY,GAAAzF,OAAA,CAAAyF,YAAA,GAAG,SAAfA,YAAYA,CAAaC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;EAClD,IAAI,EAAE,CAAC,IAAIH,EAAE,IAAIA,EAAE,IAAI,CAAC,IAAI,CAAC,IAAIE,EAAE,IAAIA,EAAE,IAAI,CAAC,CAAC,EAAE;IAC7C,MAAM,IAAIE,KAAK,CAAC,yCAAyC,CAAC;EAC9D;EACA,IAAIC,gBAAgB,GAAG,EAAE;IAAEC,eAAe,GAAG,GAAG,IAAID,gBAAgB,GAAG,GAAG,CAAC;EAC3E,IAAME,CAAC,GAAG,SAAJA,CAACA,CAAIC,CAAC,EAAEC,CAAC,EAAK;IAChB,OAAO,GAAG,GAAG,GAAG,GAAGA,CAAC,GAAG,GAAG,GAAGD,CAAC;EAClC,CAAC;EACD,IAAME,CAAC,GAAG,SAAJA,CAACA,CAAIF,CAAC,EAAEC,CAAC,EAAK;IAChB,OAAO,GAAG,GAAGA,CAAC,GAAG,GAAG,GAAGD,CAAC;EAC5B,CAAC;EACD,IAAMG,CAAC,GAAG,SAAJA,CAACA,CAAIH,CAAC,EAAK;IACb,OAAO,GAAG,GAAGA,CAAC;EAClB,CAAC;EACD,IAAMI,UAAU,GAAG,SAAbA,UAAUA,CAAIJ,CAAC,EAAEC,CAAC,EAAEI,CAAC,EAAK;IAC5B,OAAO,CAAC,CAACN,CAAC,CAACE,CAAC,EAAEI,CAAC,CAAC,GAAGL,CAAC,GAAGE,CAAC,CAACD,CAAC,EAAEI,CAAC,CAAC,IAAIL,CAAC,GAAGG,CAAC,CAACF,CAAC,CAAC,IAAID,CAAC;EACnD,CAAC;EACD,IAAMM,QAAQ,GAAG,SAAXA,QAAQA,CAAIN,CAAC,EAAEC,CAAC,EAAEI,CAAC,EAAK;IAC1B,OAAO,GAAG,GAAGN,CAAC,CAACE,CAAC,EAAEI,CAAC,CAAC,GAAGL,CAAC,GAAGA,CAAC,GAAG,GAAG,GAAGE,CAAC,CAACD,CAAC,EAAEI,CAAC,CAAC,GAAGL,CAAC,GAAGG,CAAC,CAACF,CAAC,CAAC;EAC3D,CAAC;EACD,IAAMM,eAAe,GAAG,SAAlBA,eAAeA,CAAIP,CAAC,EAAEC,CAAC,EAAEI,CAAC,EAAEG,CAAC,EAAEhE,CAAC,EAAK;IACvC,IAAIC,CAAC;MAAEgE,CAAC;MAAE7F,CAAC,GAAG,CAAC;IACf,GAAG;MACC6F,CAAC,GAAGR,CAAC,GAAG,CAACI,CAAC,GAAGJ,CAAC,IAAI,GAAG;MACrBxD,CAAC,GAAG2D,UAAU,CAACK,CAAC,EAAED,CAAC,EAAEhE,CAAC,CAAC,GAAGwD,CAAC;MAC3B,IAAIvD,CAAC,GAAG,GAAG,EAAE;QACT4D,CAAC,GAAGI,CAAC;MACT,CAAC,MACI;QACDR,CAAC,GAAGQ,CAAC;MACT;IACJ,CAAC,QAAQvG,IAAI,CAACwG,GAAG,CAACjE,CAAC,CAAC,GAAG,SAAS,IAAI,EAAE7B,CAAC,GAAG,EAAE;IAC5C,OAAO6F,CAAC;EACZ,CAAC;EACD,IAAME,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIX,CAAC,EAAEC,CAAC,EAAEI,CAAC,EAAEG,CAAC,EAAK;IACzC,KAAK,IAAI5F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;MACxB,IAAIgG,YAAY,GAAGN,QAAQ,CAACL,CAAC,EAAEI,CAAC,EAAEG,CAAC,CAAC;MACpC,IAAII,YAAY,KAAK,GAAG,EAAE;QACtB,OAAOX,CAAC;MACZ;MACA,IAAIY,QAAQ,GAAGT,UAAU,CAACH,CAAC,EAAEI,CAAC,EAAEG,CAAC,CAAC,GAAGR,CAAC;MACtCC,CAAC,IAAIY,QAAQ,GAAGD,YAAY;IAChC;IACA,OAAOX,CAAC;EACZ,CAAC;EACD,IAAIT,EAAE,KAAKC,EAAE,IAAIC,EAAE,KAAKC,EAAE,EAAE;IACxB,OAAO,UAACmB,CAAC,EAAK;MACV,OAAOA,CAAC;IACZ,CAAC;EACL;EACA,IAAIC,YAAY,GAAG,OAAOC,YAAY,KAAK,UAAU,GAAG,IAAIA,YAAY,CAACnB,gBAAgB,CAAC,GAAG,IAAI9C,KAAK,CAAC8C,gBAAgB,CAAC;EACxH,KAAK,IAAIjF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiF,gBAAgB,EAAE,EAAEjF,CAAC,EAAE;IACvCmG,YAAY,CAACnG,CAAC,CAAC,GAAGwF,UAAU,CAACxF,CAAC,GAAGkF,eAAe,EAAEN,EAAE,EAAEE,EAAE,CAAC;EAC7D;EACA,IAAMuB,QAAQ,GAAG,SAAXA,QAAQA,CAAIjB,CAAC,EAAK;IACpB,IAAIC,CAAC,GAAG,GAAG;MAAEI,CAAC,GAAG,CAAC;MAAEG,CAAC,GAAGX,gBAAgB,GAAG,CAAC;IAC5C,OAAOQ,CAAC,KAAKG,CAAC,IAAIO,YAAY,CAACV,CAAC,CAAC,IAAIL,CAAC,EAAE,EAAEK,CAAC,EAAE;MACzCJ,CAAC,IAAIH,eAAe;IACxB;IACA,EAAEO,CAAC;IACH,IAAI7D,CAAC,GAAG,CAACwD,CAAC,GAAGe,YAAY,CAACV,CAAC,CAAC,KAAKU,YAAY,CAACV,CAAC,GAAG,CAAC,CAAC,GAAGU,YAAY,CAACV,CAAC,CAAC,CAAC;MAAE5D,CAAC,GAAGwD,CAAC,GAAGzD,CAAC,GAAGsD,eAAe;MAAEW,CAAC,GAAGH,QAAQ,CAAC7D,CAAC,EAAE+C,EAAE,EAAEE,EAAE,CAAC;IAC7H,IAAIe,CAAC,IAAI,KAAK,EAAE;MACZ,OAAOE,oBAAoB,CAACX,CAAC,EAAEvD,CAAC,EAAE+C,EAAE,EAAEE,EAAE,CAAC;IAC7C,CAAC,MACI,IAAIe,CAAC,KAAK,GAAG,EAAE;MAChB,OAAOhE,CAAC;IACZ,CAAC,MACI;MACD,OAAO8D,eAAe,CAACP,CAAC,EAAEC,CAAC,EAAEA,CAAC,GAAGH,eAAe,EAAEN,EAAE,EAAEE,EAAE,CAAC;IAC7D;EACJ,CAAC;EACD,OAAO,UAACoB,CAAC,EAAK;IACV,OAAOA,CAAC,KAAK,CAAC,GAAG,CAAC,GAAGA,CAAC,KAAK,CAAC,GAAG,CAAC,GAAGV,UAAU,CAACa,QAAQ,CAACH,CAAC,CAAC,EAAErB,EAAE,EAAEE,EAAE,CAAC;EACtE,CAAC;AACL,CAAC","ignoreList":[]}